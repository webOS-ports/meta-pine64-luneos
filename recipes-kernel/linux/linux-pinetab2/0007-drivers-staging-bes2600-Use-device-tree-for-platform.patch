From 25be938b12ea9c6e70d9821cdfd0576a6a23ce33 Mon Sep 17 00:00:00 2001
From: Danct12 <danct12@disroot.org>
Date: Thu, 4 Jan 2024 10:42:15 +0000
Subject: [PATCH] drivers: staging: bes2600: Use device tree for platform data

---
Upstream-Status: Pending

 drivers/staging/bes2600/bes2600_plat.h |  10 +-
 drivers/staging/bes2600/bes2600_sdio.c | 255 +++++--------------------
 2 files changed, 50 insertions(+), 215 deletions(-)

diff --git a/drivers/staging/bes2600/bes2600_plat.h b/drivers/staging/bes2600/bes2600_plat.h
index 5838435b9315..fdb4690f9ee7 100644
--- a/drivers/staging/bes2600/bes2600_plat.h
+++ b/drivers/staging/bes2600/bes2600_plat.h
@@ -33,12 +33,12 @@ struct bes2600_platform_data_sdio {
 	/* All others are optional */
 	bool have_5ghz;
 	bool no_nptb;       /* SDIO hardware does not support non-power-of-2-blocksizes */
-	int reset;          /* GPIO to RSTn signal (0 disables) */
-	int powerup;        /* GPIO to POWERUP signal (0 disables) */
-	int wakeup;         /* GPIO to WAKEUP signal (0 disables) */
-	int host_wakeup;    /* wifi GPIO to WAKEUP host signal (0 disables) */
+	struct gpio_desc *reset;          /* GPIO to RSTn signal (0 disables) */
+	struct gpio_desc *powerup;        /* GPIO to POWERUP signal (0 disables) */
+	struct gpio_desc *wakeup;         /* GPIO to WAKEUP signal (0 disables) */
+	struct gpio_desc *host_wakeup;    /* wifi GPIO to WAKEUP host signal (0 disables) */
 	bool wlan_bt_hostwake_registered;/* wifi request_irq success or not */
-	int gpio_irq;       /* IRQ line or 0 to use SDIO IRQ */
+	struct gpio_desc *gpio_irq;       /* IRQ line or 0 to use SDIO IRQ */
 	int (*power_ctrl)(const struct bes2600_platform_data_sdio *pdata,
 			  bool enable); /* Control 3v3 / 1v8 supply */
 	int (*clk_ctrl)(const struct bes2600_platform_data_sdio *pdata,
diff --git a/drivers/staging/bes2600/bes2600_sdio.c b/drivers/staging/bes2600/bes2600_sdio.c
index 2cd6f2ffc5ee..78a1bbbf71f9 100644
--- a/drivers/staging/bes2600/bes2600_sdio.c
+++ b/drivers/staging/bes2600/bes2600_sdio.c
@@ -615,36 +615,14 @@ static int bes2600_sdio_off(const struct bes2600_platform_data_sdio *pdata)
 	rockchip_wifi_power(0);
 #endif
 
-#ifdef PLAT_CVITEK_182X
-	if (gpio_is_valid(pdata->powerup)) {
-		gpio_direction_output(pdata->powerup, 0);
-	}
-
-	if (gpio_is_valid(pdata->reset)) {
-		gpio_direction_output(pdata->reset, 0);
-	}
-#endif
-
-#ifdef PLAT_PINETAB
-	if (pdata && gpio_is_valid(pdata->powerup))
-		gpio_direction_output(pdata->powerup, 0);
-#endif
-
-	if (pdata == NULL)
-		return 0;
-
-#ifdef BES2600_INDEPENDENT_EVB
-	if (gpio_is_valid(pdata->powerup)) {
-		gpio_direction_output(pdata->powerup, 0);
-	}
-#endif
+	gpiod_direction_output(pdata->powerup, GPIOD_OUT_LOW);
+	gpiod_direction_output(pdata->reset, GPIOD_OUT_LOW);
 
 	return 0;
 }
 
 static int bes2600_sdio_on(const struct bes2600_platform_data_sdio *pdata)
 {
-
 	bes2600_info(BES2600_DBG_SDIO, "%s enter\n", __func__);
 
 #if defined(PLAT_ALLWINNER)
@@ -658,30 +636,7 @@ static int bes2600_sdio_on(const struct bes2600_platform_data_sdio *pdata)
 	rockchip_wifi_set_carddetect(1);
 #endif
 
-#ifdef PLAT_CVITEK_182X
-	if (gpio_is_valid(pdata->powerup)) {
-		gpio_direction_output(pdata->powerup, 1);
-	}
-
-	msleep(10);
-	if (gpio_is_valid(pdata->reset)) {
-		gpio_direction_output(pdata->reset, 0);
-	}
-	cvi_sdio_rescan();
-#endif
-
-#ifdef PLAT_PINETAB
-	if (pdata && gpio_is_valid(pdata->powerup))
-		gpio_direction_output(pdata->powerup, 1);
-#endif
-
-	if (pdata != NULL) {
-#ifdef BES2600_INDEPENDENT_EVB
-		if (gpio_is_valid(pdata->powerup)) {
-			gpio_direction_output(pdata->powerup, 1);
-		}
-#endif
-	}
+	gpiod_direction_output(pdata->powerup, GPIOD_OUT_HIGH);
 
 #if defined(BES2600_BOOT_UART_TO_SDIO)
 	return bes2600_boot_uart_to_sdio(&bes2600_sdio_sbus_ops);
@@ -1415,132 +1370,50 @@ static int bes2600_sdio_misc_init(struct sbus_priv *self, struct bes2600_common
 	return 0;
 }
 
-#if defined(PLAT_ALLWINNER)|| defined (PLAT_ROCKCHIP) || defined(PLAT_CVITEK_182X)
-static struct bes2600_platform_data_sdio bes_sdio_plat_data = {
-#if defined(BES2600_INDEPENDENT_EVB)
-	.reset = GPIOA(9),
-	.powerup = GPIOC(3),
-	.wakeup = -1,
-#elif defined(BES2600_INTEGRATED_MODULE_V1)
-	.reset = GPIOA(0),
-	.powerup = -1,
-	.wakeup = -1,
-#elif defined(BES2600_INTEGRATED_MODULE_V2)
-	.reset = GPIOM(2),
-	.powerup = -1,
-	.wakeup = GPIOM(5),
-#elif defined(PLAT_ROCKCHIP)
-	.reset = -1,
-	.powerup = -1,
-	.wakeup = -1,
-#elif defined(PLAT_CVITEK_182X)
-	.reset = -1,
-	.powerup = -1,
-	.wakeup = -1,
-	.host_wakeup = -1,
-#elif defined(PLAT_PINETAB)
-	.reset = -1,
-	.powerup = 16,
-	.wakeup = 15,
-	.host_wakeup = 20,
-#endif
-};
-#endif
+static struct bes2600_platform_data_sdio bes_sdio_plat_data;
 
 struct bes2600_platform_data_sdio *bes2600_get_platform_data(void)
 {
-#if defined(PLAT_ALLWINNER)|| defined (PLAT_ROCKCHIP) || defined(PLAT_CVITEK_182X)
 	return &bes_sdio_plat_data;
-#else
-	return NULL;
-#endif
 }
 
-
-static void __attribute__((unused)) bes2600_get_gpio_from_dts(int *gpio_num, const char *gpio_name)
-{
-	int wakeup_gpio;
-	// enum of_gpio_flags flags;
-	struct device_node *wireless_node;
-	wireless_node = of_find_node_with_property(NULL, gpio_name);
-	if(wireless_node != NULL){
-		// wakeup_gpio = of_get_named_gpio_flags(wireless_node, gpio_name, 0, &flags);
-		wakeup_gpio = of_get_named_gpio(wireless_node, gpio_name, 0);
-		if (gpio_is_valid(wakeup_gpio))
-			*gpio_num = wakeup_gpio;
-	}else{
-		bes2600_err(BES2600_DBG_SDIO, "find node for %s failed\n", gpio_name);
-	}
-}
-
-
 static int bes2600_platform_data_init(void)
 {
 	int ret = 0;
 	struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
-	if (pdata == NULL)
-		return 0;
+	struct device_node *np;
 
-		/* Ensure I/Os are pulled low */
-#ifdef PLAT_CVITEK_182X
-	pdata->reset=cvi_get_wifi_reset_gpio();
-#endif
-	if (gpio_is_valid(pdata->reset)) {
-		ret = gpio_request(pdata->reset, "bes2600_wlan_reset");
-		if (ret) {
-			bes2600_err(BES2600_DBG_SDIO, "can't reqest reset_gpio:%d\n", ret);
-			goto exit;
-		} else {
-			gpio_direction_output(pdata->reset, 0);
-		}
-	} else {
-		bes2600_err(BES2600_DBG_SDIO, "reset is invalid\n");
-	}
-#ifdef PLAT_CVITEK_182X
-	pdata->powerup=cvi_get_wifi_pwr_on_gpio();
-#endif
-	if (gpio_is_valid(pdata->powerup)) {
-		ret = gpio_request(pdata->powerup, "bes2600_wlan_powerup");
-		if (ret) {
-			bes2600_err(BES2600_DBG_SDIO, "can't request powerup_gpio:%d\n", ret);
-			goto exit;
-		} else {
-			gpio_direction_output(pdata->powerup, 0);
-		}
-	} else {
-		bes2600_err(BES2600_DBG_SDIO, "powerup is invalid\n");
-	}
-#ifdef PLAT_CVITEK_182X
-	pdata->wakeup=cvi_get_wifi_wakeup_gpio();
-#else
-	// bes2600_get_gpio_from_dts(&pdata->wakeup, "WIFI,host_wakeup_wifi");
-#endif
-	if (gpio_is_valid(pdata->wakeup)) {
-		ret = gpio_request(pdata->wakeup, "bes2600_wakeup");
-		if (ret) {
-			bes2600_err(BES2600_DBG_SDIO, "can't request wakeup_gpio:%d\n", ret);
-			goto exit;
-		} else {
-			gpio_direction_output(pdata->wakeup, 0);
-		}
-	} else {
-		bes2600_err(BES2600_DBG_SDIO, "wakeup is invalid\n");
-	}
-#ifndef PLAT_CVITEK_182X
-	// bes2600_get_gpio_from_dts(&pdata->host_wakeup, "WIFI,host_wake_irq");
-#endif
-	if (gpio_is_valid(pdata->host_wakeup)) {
-		ret = gpio_request(pdata->host_wakeup, "bes2600_host_irq");
-		if (ret) {
-			bes2600_err(BES2600_DBG_SDIO, "can't reqest host_wake_gpio:%d\n", ret);
-			goto exit;
-		} else {
-			gpio_direction_input(pdata->host_wakeup);
-		}
-	} else {
-		bes2600_err(BES2600_DBG_SDIO, "host_wakeup is invalid\n");
+	np = of_find_compatible_node(NULL, NULL, "bestechnic,bes2600-sdio");
+	if (!np) {
+		bes2600_err(BES2600_DBG_SDIO, "bes2600-sdio device node not found!\n");
+		goto exit;
 	}
 
+	/* Ensure I/Os are pulled low */
+	pdata->reset = fwnode_gpiod_get_index(&np->fwnode, "reset", 0, GPIOD_OUT_LOW, "bes2600_wlan_reset");
+	if (IS_ERR(pdata->reset)) {
+		bes2600_err(BES2600_DBG_SDIO, "can't request reset_gpio (%ld)\n", PTR_ERR(pdata->reset));
+		pdata->reset = NULL;
+ 	}
+
+	pdata->powerup = fwnode_gpiod_get_index(&np->fwnode, "powerup", 0, GPIOD_OUT_LOW, "bes2600_wlan_powerup");
+	if (IS_ERR(pdata->powerup)) {
+		bes2600_err(BES2600_DBG_SDIO, "can't request powerup_gpio (%ld)\n", PTR_ERR(pdata->powerup));
+		pdata->powerup = NULL;
+ 	}
+
+	pdata->wakeup = fwnode_gpiod_get_index(&np->fwnode, "wakeup", 0, GPIOD_OUT_LOW, "bes2600_wakeup");
+	if (IS_ERR(pdata->wakeup)) {
+		bes2600_err(BES2600_DBG_SDIO, "can't request wakeup_gpio (%ld)\n", PTR_ERR(pdata->wakeup));
+		pdata->wakeup = NULL;
+ 	}
+
+	pdata->host_wakeup = fwnode_gpiod_get_index(&np->fwnode, "host-wakeup", 0, GPIOD_IN, "bes2600_host_irq");
+	if (IS_ERR(pdata->host_wakeup)) {
+		bes2600_err(BES2600_DBG_SDIO, "can't request host_wake_gpio (%ld)\n", PTR_ERR(pdata->host_wakeup));
+		pdata->host_wakeup = NULL;
+ 	}
+
 	pdata->wlan_bt_hostwake_registered = false;
 exit:
 	return ret;
@@ -1549,22 +1422,11 @@ static int bes2600_platform_data_init(void)
 static void bes2600_platform_data_deinit(void)
 {
 	const struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
-	if (pdata == NULL) {
-		return;
-	}
 
-	if (gpio_is_valid(pdata->reset)) {
-		gpio_free(pdata->reset);
-	}
-	if (gpio_is_valid(pdata->powerup)) {
-		gpio_free(pdata->powerup);
-	}
-	if (gpio_is_valid(pdata->wakeup)) {
-		gpio_free(pdata->wakeup);
-	}
-	if (gpio_is_valid(pdata->host_wakeup)) {
-		gpio_free(pdata->host_wakeup);
-	}
+	gpiod_put(pdata->reset);
+	gpiod_put(pdata->powerup);
+	gpiod_put(pdata->wakeup);
+	gpiod_put(pdata->host_wakeup);
 }
 
 static int bes2600_sdio_reset(struct sbus_priv *self)
@@ -1573,14 +1435,10 @@ static int bes2600_sdio_reset(struct sbus_priv *self)
 
 	bes2600_info(BES2600_DBG_SDIO, "%s ...\n", __func__);
 
-	if (plat_data == NULL)
-		return 0;
+	gpiod_direction_output(plat_data->reset, GPIOD_OUT_HIGH);
+	mdelay(50);
+	gpiod_direction_output(plat_data->reset, GPIOD_OUT_LOW);
 
-	if (plat_data->reset) {
-		gpio_set_value(plat_data->reset, 1);
-		mdelay(50);
-		gpio_set_value(plat_data->reset, 0);
-	}
 	return 0;
 }
 
@@ -1617,8 +1475,6 @@ static void bes2600_gpio_wakeup_mcu(struct sbus_priv *self, int flag)
 {
 	bool gpio_wakeup = false;
 	const struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
-	if (pdata == NULL)
-		return;
 
 	bes2600_dbg(BES2600_DBG_SDIO, "%s with %d\n", __func__, flag);
 
@@ -1638,13 +1494,8 @@ static void bes2600_gpio_wakeup_mcu(struct sbus_priv *self, int flag)
 	/* do wakeup mcu operation */
 	if(gpio_wakeup) {
 		bes2600_dbg(BES2600_DBG_SDIO, "pull high gpio by flag:%d\n", flag);
-		if (gpio_is_valid(pdata->wakeup)) {
-			gpio_set_value(pdata->wakeup, 1);
-			msleep(10);
-		} else {
-			bes2600_err(BES2600_DBG_SDIO,
-				"%s, wakeup gpio is invalid\n", __func__);
-		}
+		gpiod_direction_output(pdata->wakeup, GPIOD_OUT_HIGH);
+		msleep(10);
 	}
 
 	/* set flag of gpio_wakeup_flags */
@@ -1657,8 +1508,6 @@ static void bes2600_gpio_allow_mcu_sleep(struct sbus_priv *self, int flag)
 {
 	bool gpio_sleep = false;
 	const struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
-	if (pdata == NULL)
-		return;
 
 	bes2600_dbg(BES2600_DBG_SDIO, "%s with %d\n", __func__, flag);
 
@@ -1681,12 +1530,7 @@ static void bes2600_gpio_allow_mcu_sleep(struct sbus_priv *self, int flag)
 	/* do wakeup mcu operation */
 	if(gpio_sleep) {
 		bes2600_dbg(BES2600_DBG_SDIO, "pull low gpio by flag:%d\n", flag);
-		if (gpio_is_valid(pdata->wakeup)) {
-			gpio_set_value(pdata->wakeup, 0);
-		} else {
-			bes2600_err(BES2600_DBG_SDIO,
-				"%s, wakeup gpio is invalid\n", __func__);
-		}
+		gpiod_direction_output(pdata->wakeup, GPIOD_OUT_LOW);
 	}
 
 	mutex_unlock(&self->io_mutex);
@@ -2032,14 +1876,8 @@ static void bes2600_sdio_power_down(struct sbus_priv *self)
 #if defined(PLAT_ALLWINNER)
 	sunxi_wlan_set_power(false);
 #endif
-
-#ifdef PLAT_CVITEK_182X
 	struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
-
-	if (gpio_is_valid(pdata->powerup)) {
-		gpio_direction_output(pdata->powerup, 0);
-	}
-#endif
+	gpiod_direction_output(pdata->powerup, GPIOD_OUT_LOW);
 #endif
 
 	msleep(10);
@@ -2070,9 +1908,6 @@ static bool bes2600_sdio_wakeup_source(struct sbus_priv *self)
 {
 	struct bes2600_platform_data_sdio *pdata = bes2600_get_platform_data();
 
-	if (!pdata)
-		return false;
-
 	if(pdata->wakeup_source) {
 		pdata->wakeup_source = false;
 		return true;
