From a2efdb44b66cf9a0fa58eff1dc98a4e6d4e25630 Mon Sep 17 00:00:00 2001
From: Danct12 <danct12@disroot.org>
Date: Tue, 19 Dec 2023 08:22:35 +0000
Subject: [PATCH] drm/panel: boe-th101mb31ig002-28a: Various improvement to
 driver

---
Upstream-Status: Pending

 .../drm/panel/panel-boe-th101mb31ig002-28a.c  | 175 ++++++++++--------
 1 file changed, 100 insertions(+), 75 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-boe-th101mb31ig002-28a.c b/drivers/gpu/drm/panel/panel-boe-th101mb31ig002-28a.c
index 9ccef2303aa5..5eb29b6a5fe2 100644
--- a/drivers/gpu/drm/panel/panel-boe-th101mb31ig002-28a.c
+++ b/drivers/gpu/drm/panel/panel-boe-th101mb31ig002-28a.c
@@ -34,67 +34,22 @@ static inline struct boe *panel_to_boe(struct drm_panel *panel)
 	return container_of(panel, struct boe, panel);
 }
 
-static int boe_disable(struct drm_panel *panel)
+static void boe_reset(struct boe *ctx)
 {
-	struct boe *ctx = panel_to_boe(panel);
-
-	if (!ctx->enabled)
-		return 0;
-
-	mipi_dsi_dcs_set_display_off(ctx->dsi);
-
-	msleep(120);
-
-	ctx->enabled = false;
-	return 0;
-}
-
-static int boe_unprepare(struct drm_panel *panel)
-{
-	struct boe *ctx = panel_to_boe(panel);
-
-	if (!ctx->prepared)
-		return 0;
-
-	mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
-
-	msleep(220);
-
-	gpiod_set_value_cansleep(ctx->reset, 1);
-	gpiod_set_value_cansleep(ctx->enable, 0);
-	regulator_disable(ctx->power);
-
-	ctx->prepared = false;
-	return 0;
+	gpiod_direction_output(ctx->reset, 0);
+	usleep_range(10, 100);
+	gpiod_direction_output(ctx->reset, 1);
+	usleep_range(10, 100);
+	gpiod_direction_output(ctx->reset, 0);
+	usleep_range(5000, 6000);
 }
 
-static int boe_prepare(struct drm_panel *panel)
+static int boe_enable(struct boe *ctx)
 {
-	struct boe *ctx = panel_to_boe(panel);
 	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
 	int ret;
 
-	if (ctx->prepared)
-		return 0;
-
-	ret = regulator_enable(ctx->power);
-	if (ret) {
-		dev_err(&dsi->dev, "Failed to enable power supply: %d\n", ret);
-		return ret;
-	}
-
-	gpiod_set_value_cansleep(ctx->enable, 1);
-
-	msleep(120);
-
-	gpiod_direction_output(ctx->reset, 1);
-
-	msleep(120);
-
-	gpiod_direction_output(ctx->reset, 0);
-
-	msleep(120);
-
 	mipi_dsi_dcs_write_seq(dsi, 0xE0, 0xAB, 0xBA);
 	mipi_dsi_dcs_write_seq(dsi, 0xE1, 0xBA, 0xAB);
 	mipi_dsi_dcs_write_seq(dsi, 0xB1, 0x10, 0x01, 0x47, 0xFF);
@@ -119,29 +74,96 @@ static int boe_prepare(struct drm_panel *panel)
 	mipi_dsi_dcs_write_seq(dsi, 0xF0, 0x12, 0x03, 0x20, 0x00, 0xFF);
 	mipi_dsi_dcs_write_seq(dsi, 0xF3, 0x00);
 
-	mipi_dsi_dcs_exit_sleep_mode(dsi);
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
 
 	msleep(120);
 
-	ctx->prepared = true;
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set panel on: %d\n", ret);
+		return ret;
+	}
+
 	return 0;
 }
 
-static int boe_enable(struct drm_panel *panel)
+static int boe_disable(struct boe *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0)
+		dev_err(dev, "Failed to set panel off: %d\n", ret);
+
+	msleep(120);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0)
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+
+	return 0;
+}
+
+static int boe_unprepare(struct drm_panel *panel)
 {
 	struct boe *ctx = panel_to_boe(panel);
+	int ret;
 
-	if (ctx->enabled)
+	if (!ctx->prepared)
 		return 0;
 
-	mipi_dsi_dcs_set_display_on(ctx->dsi);
+	ret = boe_disable(ctx);
+	if (ret < 0)
+		dev_err(panel->dev, "Failed to un-initialize panel: %d\n", ret);
 
-	msleep(120);
+	gpiod_set_value_cansleep(ctx->reset, 1);
+	gpiod_set_value_cansleep(ctx->enable, 0);
+	regulator_disable(ctx->power);
+
+	ctx->enabled = false;
+	ctx->prepared = false;
+	return 0;
+}
+
+static int boe_prepare(struct drm_panel *panel)
+{
+	struct boe *ctx = panel_to_boe(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	ret = regulator_enable(ctx->power);
+	if (ret) {
+		dev_err(dev, "Failed to enable power supply: %d\n", ret);
+		return ret;
+	}
+
+	gpiod_set_value_cansleep(ctx->enable, 1);
+	msleep(50);
 
 	ctx->enabled = true;
+
+	boe_reset(ctx);
+
+	ret = boe_enable(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable panel: %d\n", ret);
+		return ret;
+	}
+
+	ctx->prepared = true;
 	return 0;
 }
 
+
 static const struct drm_display_mode boe_default_mode = {
 	.clock		= 73500,
 
@@ -155,6 +177,9 @@ static const struct drm_display_mode boe_default_mode = {
 	.vsync_end	= 1280 + 2 + 4,
 	.vtotal		= 1280 + 2 + 4 + 12,
 
+	.width_mm	= 135,
+	.height_mm	= 216,
+
 	.type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED,
 };
 
@@ -174,11 +199,10 @@ static int boe_get_modes(struct drm_panel *panel,
 	}
 
 	drm_mode_set_name(mode);
-	drm_mode_probed_add(connector, mode);
 
 	connector->display_info.bpc = 8;
-	connector->display_info.width_mm = 135;
-	connector->display_info.height_mm = 216;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
 
 	/*
 	 * TODO: Remove once all drm drivers call
@@ -186,6 +210,8 @@ static int boe_get_modes(struct drm_panel *panel,
 	 */
 	drm_connector_set_panel_orientation(connector, ctx->orientation);
 
+	drm_mode_probed_add(connector, mode);
+
 	return 1;
 }
 
@@ -197,10 +223,8 @@ static enum drm_panel_orientation boe_get_orientation(struct drm_panel *panel)
 }
 
 static const struct drm_panel_funcs boe_funcs = {
-	.disable = boe_disable,
-	.unprepare = boe_unprepare,
 	.prepare = boe_prepare,
-	.enable = boe_enable,
+	.unprepare = boe_unprepare,
 	.get_modes = boe_get_modes,
 	.get_orientation = boe_get_orientation,
 };
@@ -220,8 +244,11 @@ static int boe_dsi_probe(struct mipi_dsi_device *dsi)
 	mipi_dsi_set_drvdata(dsi, ctx);
 	ctx->dsi = dsi;
 
-	drm_panel_init(&ctx->panel, &dsi->dev, &boe_funcs,
-		       DRM_MODE_CONNECTOR_DSI);
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_MODE_NO_EOT_PACKET |
+			  MIPI_DSI_MODE_LPM;
 
 	ctx->power = devm_regulator_get(&dsi->dev, "power");
 	if (IS_ERR(ctx->power))
@@ -243,20 +270,18 @@ static int boe_dsi_probe(struct mipi_dsi_device *dsi)
 		return dev_err_probe(&dsi->dev, ret,
 				     "Failed to get orientation\n");
 
+	drm_panel_init(&ctx->panel, &dsi->dev, &boe_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
 	ret = drm_panel_of_backlight(&ctx->panel);
 	if (ret)
 		return ret;
 
 	drm_panel_add(&ctx->panel);
 
-	dsi->lanes = 4;
-	dsi->format = MIPI_DSI_FMT_RGB888;
-	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_BURST |
-			  MIPI_DSI_MODE_NO_EOT_PACKET |
-			  MIPI_DSI_MODE_LPM;
-
 	ret = mipi_dsi_attach(dsi);
 	if (ret < 0) {
+		dev_err_probe(&dsi->dev, ret, "Failed to attach panel to DSI host\n");
 		drm_panel_remove(&ctx->panel);
 		return ret;
 	}
@@ -290,4 +315,4 @@ module_mipi_dsi_driver(boe_driver);
 
 MODULE_AUTHOR("Alexander Warnecke <awarnecke002@hotmail.com>");
 MODULE_DESCRIPTION("BOE TH101MB31IG002-28A MIPI-DSI LCD panel");
-MODULE_LICENSE("GPL");
+MODULE_LICENSE("GPL v2");
