From 927cf607a83219b27019404f6b7ba5d248d01c79 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Mon, 20 Apr 2020 17:30:25 +0000
Subject: [PATCH] pinephone: Add volume_key environment variable

When the user has a volume key pressed volume_key variable will
contain either value 'down' or 'up', otherwise it will be empty.

Usage example in a u-boot script:

if test x$volume_key = xup ; then
  # choice when pressing volume up key
elif test x$volume_key = xdown ; then
  # choice when pressing volume down key
else
  # default choice
fi

Signed-off-by: Ondrej Jirman <megous@megous.com>
---
 board/sunxi/Makefile |   1 +
 board/sunxi/board.c  |  14 ++++++
 board/sunxi/lradc.c  | 100 +++++++++++++++++++++++++++++++++++++++++++
 board/sunxi/lradc.h  |  30 +++++++++++++
 4 files changed, 145 insertions(+)
 create mode 100644 board/sunxi/lradc.c
 create mode 100644 board/sunxi/lradc.h

diff --git a/board/sunxi/Makefile b/board/sunxi/Makefile
index c4e13f8c38..a5bc1cd59f 100644
--- a/board/sunxi/Makefile
+++ b/board/sunxi/Makefile
@@ -7,6 +7,7 @@
 # (C) Copyright 2000-2003
 # Wolfgang Denk, DENX Software Engineering, wd@denx.de.
 obj-y	+= board.o
+obj-y	+= lradc.o
 obj-$(CONFIG_SUN7I_GMAC)	+= gmac.o
 obj-$(CONFIG_MACH_SUN4I)	+= dram_sun4i_auto.o
 obj-$(CONFIG_MACH_SUN5I)	+= dram_sun5i_auto.o
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 98bc3cd0c1..18fd0c4ca6 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -36,6 +36,7 @@
 #include <spl.h>
 #include <sy8106a.h>
 #include <asm/setup.h>
+#include "lradc.h"
 
 #if defined CONFIG_VIDEO_LCD_PANEL_I2C && !(defined CONFIG_SPL_BUILD)
 /* So that we can use pin names in Kconfig and sunxi_name_to_gpio() */
@@ -606,6 +607,10 @@ void sunxi_board_init(void)
 {
 	int power_failed = 0;
 
+	// we init the lradc in SPL to get the ADC started early to have
+	// a valid sample when U-Boot main binary gets executed.
+	lradc_enable();
+
 #ifdef CONFIG_SY8106A_POWER
 	power_failed = sy8106a_set_vout1(CONFIG_SY8106A_VOUT1_VOLT);
 #endif
@@ -854,6 +859,15 @@ int misc_init_r(void)
 		env_set("mmc_bootdev", "1");
 	}
 
+	int key = lradc_get_pressed_key();
+	if (key == KEY_VOLUMEDOWN)
+		env_set("volume_key", "down");
+	else if (key == KEY_VOLUMEUP)
+		env_set("volume_key", "up");
+	
+	// no longer needed
+	lradc_disable();
+
 	setup_environment(gd->fdt_blob);
 
 #ifdef CONFIG_USB_ETHER
diff --git a/board/sunxi/lradc.c b/board/sunxi/lradc.c
new file mode 100644
index 0000000000..27038588f8
--- /dev/null
+++ b/board/sunxi/lradc.c
@@ -0,0 +1,100 @@
+/**
+ * p-boot - pico sized bootloader
+ *
+ * Copyright (C) 2020  Ondřej Jirman <megi@xff.cz>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include "lradc.h"
+
+#define LRADC_BASE		0x1c21800
+
+#define LRADC_CTRL		(LRADC_BASE + 0x00)
+#define LRADC_INTC		(LRADC_BASE + 0x04)
+#define LRADC_INTS		(LRADC_BASE + 0x08)
+#define LRADC_DATA0		(LRADC_BASE + 0x0c)
+#define LRADC_DATA1		(LRADC_BASE + 0x10)
+
+/* LRADC_CTRL bits */
+#define FIRST_CONVERT_DLY(x)	((x) << 24) /* 8 bits */
+#define CHAN_SELECT(x)		((x) << 22) /* 2 bits */
+#define CONTINUE_TIME_SEL(x)	((x) << 16) /* 4 bits */
+#define KEY_MODE_SEL(x)		((x) << 12) /* 2 bits */
+#define LEVELA_B_CNT(x)		((x) << 8)  /* 4 bits */
+#define HOLD_KEY_EN(x)		((x) << 7)
+#define HOLD_EN(x)		((x) << 6)
+#define LEVELB_VOL(x)		((x) << 4)  /* 2 bits */
+#define SAMPLE_RATE(x)		((x) << 2)  /* 2 bits */
+#define ENABLE(x)		((x) << 0)
+
+/* LRADC_INTC and LRADC_INTS bits */
+#define CHAN1_KEYUP_IRQ		BIT(12)
+#define CHAN1_ALRDY_HOLD_IRQ	BIT(11)
+#define CHAN1_HOLD_IRQ		BIT(10)
+#define	CHAN1_KEYDOWN_IRQ	BIT(9)
+#define CHAN1_DATA_IRQ		BIT(8)
+#define CHAN0_KEYUP_IRQ		BIT(4)
+#define CHAN0_ALRDY_HOLD_IRQ	BIT(3)
+#define CHAN0_HOLD_IRQ		BIT(2)
+#define	CHAN0_KEYDOWN_IRQ	BIT(1)
+#define CHAN0_DATA_IRQ		BIT(0)
+
+// this is for PinePhone only
+
+int lradc_get_pressed_key(void)
+{
+	uint32_t val;
+	uint32_t vref = 3000000 * 2 / 3;
+
+	val = readl(LRADC_DATA0) & 0x3f;
+	val = val * vref / 63;
+
+//	printf("lradc=%u\n", val);
+
+	if (val < 200000) // 158730
+		return KEY_VOLUMEUP;
+	else if (val < 400000) // 349206
+		return KEY_VOLUMEDOWN;
+
+	return KEY_NONE;
+}
+
+void lradc_enable(void)
+{
+	// aldo3 is always on and defaults to 3V
+
+	writel(0xffffffff, LRADC_INTS);
+	writel(0, LRADC_INTC);
+
+	/*
+	 * Set sample time to 4 ms / 250 Hz. Wait 2 * 4 ms for key to
+	 * stabilize on press, wait (1 + 1) * 4 ms for key release
+	 */
+	writel(FIRST_CONVERT_DLY(0) | LEVELA_B_CNT(0) | HOLD_EN(0) |
+		SAMPLE_RATE(0) | ENABLE(1), LRADC_CTRL);
+
+}
+
+void lradc_disable(void)
+{
+	writel(0xffffffff, LRADC_INTS);
+	writel(0, LRADC_INTC);
+
+	/* Disable lradc, leave other settings unchanged */
+	writel(FIRST_CONVERT_DLY(2) | LEVELA_B_CNT(1) | HOLD_EN(1) |
+		SAMPLE_RATE(2), LRADC_CTRL);
+}
diff --git a/board/sunxi/lradc.h b/board/sunxi/lradc.h
new file mode 100644
index 0000000000..a26b777431
--- /dev/null
+++ b/board/sunxi/lradc.h
@@ -0,0 +1,30 @@
+/**
+ * p-boot - pico sized bootloader
+ *
+ * Copyright (C) 2020  Ondřej Jirman <megi@xff.cz>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+enum {
+	KEY_NONE = 0,
+	KEY_VOLUMEDOWN = 1,
+	KEY_VOLUMEUP = 2,
+};
+
+int lradc_get_pressed_key(void);
+void lradc_enable(void);
+void lradc_disable(void);
-- 
2.17.0

